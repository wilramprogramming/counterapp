package com.musalsou.counterapp;
import com.codename1.rad.annotations.*;
import com.codename1.rad.controllers.*;
import com.musalsou.counterapp.*;
import static com.codename1.rad.util.NonNull.nonNull;
import static com.codename1.rad.util.NonNull.nonNullEntries;
import com.codename1.ui.spinner.Picker;
import com.codename1.rad.schemas.*;
import com.codename1.rad.ui.builders.*;
import ca.weblite.shared.components.*;
import com.codename1.rad.models.*;
import com.codename1.rad.nodes.*;
import com.codename1.rad.ui.entityviews.*;
import com.codename1.rad.ui.beans.*;
import com.codename1.rad.propertyviews.*;
import com.codename1.ui.*;
import com.codename1.ui.plaf.*;
import com.codename1.components.*;
import static com.codename1.ui.CN.*;
import com.codename1.ui.layouts.*;
import com.codename1.rad.ui.ViewContext;
import com.codename1.rad.ui.EntityView;
@Autogenerated
public class StartPage extends AbstractStartPage<StartPageModel> implements StartPageSchema {
    private final ViewContext<StartPageModel> context;
    private final FormController formController;
    private final ApplicationController applicationController;
    private final AppSectionController sectionController;
    private final ViewController viewController;
    private final FormController parentFormController;
    private java.util.List<Runnable> __initOnceListeners;
    private java.util.List<Runnable> __deinitListeners;
    // Placeholder for the row model when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private com.codename1.rad.models.Entity rowModel;
    // Placeholder for the row index when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private int rowIndex;
    // Placeholder for the row selected state when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private boolean rowSelected;
    // Placeholder for the row focused state when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private boolean rowFocused;
    // Placeholder for the EntityListView when creating EntityListCellRenderer.
    // Can access inside <script> tags inside <row-template>
    private com.codename1.rad.ui.entityviews.EntityListView rowList;
    private EntityView view = this;
    private EntityView rowView;
    private ViewContext subContext;
    private Container _currentContainer;
    private static ViewContext<StartPageModel> wrapContext(ViewContext<StartPageModel> context) {
        com.codename1.rad.controllers.ViewController _viewController = new com.codename1.rad.controllers.ViewController(context.getController());
        return _viewController.createViewContext(StartPageModel.class, context.getEntity());
    }

    private Component registerViewController(Component cmp) {
        this.context.getController().setView(cmp);        return this.context.getController().getView();
    }

    @Override
    public StartPageModel getEntity(){ return (StartPageModel)super.getEntity();}
    public StartPage(@Inject ViewContext<StartPageModel> context) {
        super(wrapContext(context));
        this.context = getContext();
        this.formController = this.context.getController().getFormController();
        this.viewController = this.context.getController();
        this.applicationController = this.context.getController().getApplicationController();
        this.sectionController = this.context.getController().getSectionController();
        this.parentFormController = (this.formController == null || this.formController.getParent() == null) ? null : this.formController.getParent().getFormController();
        getAllStyles().stripMarginAndPadding();
        setLayout(new BorderLayout());
        _currentContainer = this;
        add(BorderLayout.CENTER, registerViewController(createComponent0()));
    }
    private com.codename1.ui.Container createComponent0() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "0");
         attributes.put("safeArea", "true");
         attributes.put("scrollableY", "true");
         attributes.put("style.bgColor", "0xffffff");
         attributes.put("style.bgTransparency", "0xff");
         attributes.put("style.paddingBottom", "5vw");
         attributes.put("style.paddingLeft", "5vw");
         attributes.put("style.paddingRight", "5vw");
         attributes.put("style.paddingTop", "5vw");
         attributes.put("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
         attributes.put("xsi:noNamespaceSchemaLocation", "StartPage.xsd");
        com.codename1.rad.ui.builders.ContainerBuilder _builder = new com.codename1.rad.ui.builders.ContainerBuilder(context, "y", attributes);
        _builder.setParentContainer(_currentContainer, null);
        // safeArea=true
        
        // scrollableY=true
        
        // style.bgColor=0xffffff
        
        // style.bgTransparency=0xff
        
        // style.paddingBottom=5vw
        
        // style.paddingLeft=5vw
        
        // style.paddingRight=5vw
        
        // style.paddingTop=5vw
        
        // xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
        
        // xsi:noNamespaceSchemaLocation=StartPage.xsd
        
        com.codename1.ui.Container _cmp = (com.codename1.ui.Container)_builder.getComponent();
        // safeArea=true
        _cmp.setSafeArea(true);
        // scrollableY=true
        _cmp.setScrollableY(true);
        // xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
        
        // xsi:noNamespaceSchemaLocation=StartPage.xsd
        
        // style.bgColor=0xffffff
        {com.codename1.ui.plaf.Style __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getStyle();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.plaf.Style)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setBgColor(0xffffff);}
        // style.bgTransparency=0xff
        {com.codename1.ui.plaf.Style __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getStyle();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.plaf.Style)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setBgTransparency(0xff);}
        // style.paddingBottom=5vw
        {com.codename1.ui.plaf.Style __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getStyle();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.plaf.Style)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setPaddingBottom((int)Math.round(((float)5)/100f * CN.getDisplayWidth()));}
        // style.paddingLeft=5vw
        {com.codename1.ui.plaf.Style __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getStyle();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.plaf.Style)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setPaddingLeft((int)Math.round(((float)5)/100f * CN.getDisplayWidth()));}
        // style.paddingRight=5vw
        {com.codename1.ui.plaf.Style __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getStyle();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.plaf.Style)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setPaddingRight((int)Math.round(((float)5)/100f * CN.getDisplayWidth()));}
        // style.paddingTop=5vw
        {com.codename1.ui.plaf.Style __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getStyle();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.plaf.Style)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setPaddingTop((int)Math.round(((float)5)/100f * CN.getDisplayWidth()));}
        // style.paddingUnitBottom=com.codename1.ui.plaf.Style.UNIT_TYPE_PIXELS
        {com.codename1.ui.plaf.Style __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getStyle();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.plaf.Style)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setPaddingUnitBottom(com.codename1.ui.plaf.Style.UNIT_TYPE_PIXELS);}
        // style.paddingUnitLeft=com.codename1.ui.plaf.Style.UNIT_TYPE_PIXELS
        {com.codename1.ui.plaf.Style __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getStyle();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.plaf.Style)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setPaddingUnitLeft(com.codename1.ui.plaf.Style.UNIT_TYPE_PIXELS);}
        // style.paddingUnitRight=com.codename1.ui.plaf.Style.UNIT_TYPE_PIXELS
        {com.codename1.ui.plaf.Style __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getStyle();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.plaf.Style)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setPaddingUnitRight(com.codename1.ui.plaf.Style.UNIT_TYPE_PIXELS);}
        // style.paddingUnitTop=com.codename1.ui.plaf.Style.UNIT_TYPE_PIXELS
        {com.codename1.ui.plaf.Style __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getStyle();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.plaf.Style)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setPaddingUnitTop(com.codename1.ui.plaf.Style.UNIT_TYPE_PIXELS);}
        // 9 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 9 child nodes
        // Child tag title is type com.codename1.rad.ui.beans.Title
        // Create bean com.codename1.rad.ui.beans.Title
        createBean1();
        // Child tag spanLabel is type com.codename1.components.SpanLabel
        // Add child component  with child tag spanLabel
        {
            com.codename1.ui.Component _childCmp = createComponent2();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag spanLabel is type com.codename1.components.SpanLabel
        // Add child component  with child tag spanLabel
        {
            com.codename1.ui.Component _childCmp = createComponent3();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        // Child tag spanLabel is type com.codename1.components.SpanLabel
        // Add child component  with child tag spanLabel
        {
            com.codename1.ui.Component _childCmp = createComponent4();
            if (_childCmp.getClientProperty("RAD_NO_ADD") == null) {
                _cmp.addComponent(_childCmp);
            }
        }
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.components.SpanLabel createComponent2() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "2");
         attributes.put("style.marginBottom", "1rem");
         attributes.put("textUIID", "StartPageText");
        com.codename1.components.SpanLabel _cmp = new com.codename1.components.SpanLabel();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.components.SpanLabel> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.components.SpanLabel>(_cmp, context, "spanLabel", attributes);
        _cmp.setText("Login");        // textUIID=StartPageText
        _cmp.setTextUIID("StartPageText");
        // style.marginBottom=1rem
        {com.codename1.ui.plaf.Style __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getStyle();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.plaf.Style)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setMarginBottom((int)Math.round(1 * com.codename1.ui.Font.getDefaultFont().getHeight()));}
        // style.marginUnitBottom=com.codename1.ui.plaf.Style.UNIT_TYPE_PIXELS
        {com.codename1.ui.plaf.Style __tmpReceiver__cmp = null;{Object __tmp___tmpReceiver__cmp=_cmp.getStyle();__tmpReceiver__cmp=(__tmp___tmpReceiver__cmp==null)?null:(com.codename1.ui.plaf.Style)__tmp___tmpReceiver__cmp;}if (__tmpReceiver__cmp!=null)__tmpReceiver__cmp.setMarginUnitBottom(com.codename1.ui.plaf.Style.UNIT_TYPE_PIXELS);}
        // 1 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 1 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.components.SpanLabel createComponent3() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "3");
         attributes.put("textUIID", "StartPageText");
        com.codename1.components.SpanLabel _cmp = new com.codename1.components.SpanLabel();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.components.SpanLabel> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.components.SpanLabel>(_cmp, context, "spanLabel", attributes);
        _cmp.setText("Username:");        // textUIID=StartPageText
        _cmp.setTextUIID("StartPageText");
        // 1 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 1 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.components.SpanLabel createComponent4() {
        java.util.Map<String,String> attributes = new java.util.HashMap<String,String>();
         attributes.put("rad-id", "4");
         attributes.put("textUIID", "StartPageText");
        com.codename1.components.SpanLabel _cmp = new com.codename1.components.SpanLabel();
        com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.components.SpanLabel> _builder = new com.codename1.rad.ui.builders.SimpleComponentDecorator<com.codename1.components.SpanLabel>(_cmp, context, "spanLabel", attributes);
        _cmp.setText("Password:");        // textUIID=StartPageText
        _cmp.setTextUIID("StartPageText");
        // 1 child nodes
        // Create child components
        Container _tmp_old_currentContainer = _currentContainer;
        _currentContainer = _cmp;
        // 1 child nodes
        _currentContainer = _tmp_old_currentContainer;
        // Set up bindings
        // Set up action Bindings
        return _cmp;
    }
    private com.codename1.rad.ui.beans.Title createBean1() {
        com.codename1.rad.ui.beans.Title _bean = new com.codename1.rad.ui.beans.Title(new com.codename1.rad.ui.ViewContext(context.getController(), context.getEntity()));
        {
            com.codename1.ui.Component _injectedValue = null;
            if (_injectedValue != null) _bean.setComponent((com.codename1.ui.Component)_injectedValue);
        }
        // hidden=true
        _bean.setHidden(true);
        // 1 child nodes
        // Create child nodes
        // 1 child nodes
        return _bean;
    }
    @Override
    public void commit() {}
    @Override
    public void update() {}
    @Override
    public void activate() {
        super.activate();
    }
    private <T extends Node> T _setParent(Class<T> cls, T node) {
        node.setParent(getViewNode());
        return node;
    }
    private <T> T _getInjectedParameter(Class<T> type, ViewContext context, Controller controller) {
        T lookedUp = (T)controller.lookup(type);
        if (lookedUp != null) return lookedUp;
        if (type == ViewContext.class) return (T)context;
        if (Entity.class.isAssignableFrom(type)) return (T)context.getEntity();
        if (type.isAssignableFrom(this.getClass())) return (T)this;
        if (type.isAssignableFrom(controller.getClass())) return (T)controller;
        if (type.isAssignableFrom(FormController.class)) return (T)formController;
        if (type.isAssignableFrom(ApplicationController.class)) return (T)applicationController;
        if (type.isAssignableFrom(ViewController.class)) return (T)viewController;
        return null;
    }
    @Override
    protected void initComponent() {
        super.initComponent();
        if (__initOnceListeners != null && !__initOnceListeners.isEmpty()) {
            java.util.List<Runnable> toRun = new java.util.ArrayList<Runnable>(__initOnceListeners);
            __initOnceListeners = null;
            for (Runnable r : toRun) r.run();
        }
    }
    @Override
    protected void deinitialize() {
        if (__deinitListeners != null && !__deinitListeners.isEmpty()) {
            java.util.List<Runnable> toRun = new java.util.ArrayList<Runnable>(__deinitListeners);
            for (Runnable r : toRun) r.run();
        }
        super.deinitialize();
    }
    private void addInitOnceListener(Runnable r) {
        if (__initOnceListeners == null) __initOnceListeners = new java.util.ArrayList<>();
        __initOnceListeners.add(r);
    }
    private void addDeinitListener(Runnable r) {
        if (__deinitListeners == null) __deinitListeners = new java.util.ArrayList<>();
        __deinitListeners.add(r);
    }
    private void back() {
        com.codename1.rad.controllers.ActionSupport.dispatchEvent(new com.codename1.rad.controllers.FormController.FormBackEvent(this));
    }
}
